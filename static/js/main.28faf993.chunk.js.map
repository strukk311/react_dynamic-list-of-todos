{"version":3,"sources":["components/TodoList/TodoList.tsx","api.ts","components/CurrentUser/CurrentUser.tsx","App.tsx","index.tsx"],"names":["TodoList","todos","setSelectedUserId","useState","isFiltered","setIsFiltered","isCompleted","setIsCompleted","visibleTodos","setVisibleTodos","useEffect","filter","todo","titleToLower","title","toLowerCase","includes","completed","className","type","value","onChange","target","name","map","item","checked","readOnly","onClick","userId","id","API_URL","getTodos","a","fetch","response","json","getUser","CurrentUser","clearUser","currentUser","setCurrentUser","errorLoad","setErrorLoad","fetchUser","useCallback","newUser","email","phone","App","selectedUserId","setTodos","getData","data","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.28faf993.chunk.js","sourcesContent":["import React, {\n  useState,\n  useEffect,\n} from 'react';\nimport './TodoList.scss';\nimport { Todo } from '../../types/Todo';\n\ninterface Props {\n  todos: Todo[],\n  setSelectedUserId: (userId: number) => void,\n}\n\nexport const TodoList: React.FC<Props> = ({ todos, setSelectedUserId }) => {\n  const [isFiltered, setIsFiltered] = useState('');\n  const [isCompleted, setIsCompleted] = useState('all');\n  const [visibleTodos, setVisibleTodos] = useState(todos);\n\n  useEffect(() => {\n    setVisibleTodos(todos.filter(todo => {\n      const titleToLower = todo.title.toLowerCase().includes(isFiltered);\n\n      switch (isCompleted) {\n        case 'all':\n          return titleToLower;\n\n        case 'active':\n          return titleToLower && todo.completed === false;\n\n        case 'completed':\n          return titleToLower && todo.completed === true;\n\n        default:\n          return todo;\n      }\n    }));\n  }, [isFiltered, isCompleted, todos]);\n\n  return (\n    <div className=\"TodoList\">\n      <h2>Todos:</h2>\n\n      <div className=\"TodoList__sort\">\n        <label>\n          Title:\n          <input\n            className=\"TodoList__input\"\n            type=\"text\"\n            value={isFiltered}\n            onChange={({ target }) => {\n              setIsFiltered(target.value);\n            }}\n          />\n        </label>\n\n        <label>\n          <select\n            className=\"TodoList__input\"\n            name=\"isCompleted\"\n            onChange={({ target }) => {\n              setIsCompleted(target.value);\n            }}\n          >\n            <option value=\"show all\">\n              All\n            </option>\n\n            <option value=\"not completed\">\n              Active\n            </option>\n\n            <option value=\"completed\">\n              Completed\n            </option>\n          </select>\n        </label>\n      </div>\n\n      <div className=\"TodoList__list-container\">\n        <ul className=\"TodoList__list\">\n          {visibleTodos.map(item => {\n            return (\n              <li\n                key={item.id}\n                className={`TodoList__item\n                  TodoList__item--${item.completed ? 'checked' : 'unchecked'}`}\n              >\n                <label>\n                  <input\n                    checked={item.completed}\n                    type=\"checkbox\"\n                    readOnly\n                  />\n                  <p>{item.title}</p>\n                </label>\n\n                <button\n                  className=\"\n                    TodoList__user-button\n                    TodoList__user-button--selected\n                    button\n                  \"\n                  type=\"button\"\n                  onClick={() => setSelectedUserId(item.userId)}\n                >\n                  User&nbsp;#\n                  {item.userId}\n                </button>\n              </li>\n            );\n          })}\n        </ul>\n      </div>\n    </div>\n  );\n};\n","import { Todo } from './types/Todo';\nimport { User } from './types/User';\n\nconst API_URL = 'https://mate.academy/students-api/';\n\nexport const getTodos = async (): Promise<Todo[]> => {\n  const response = await fetch(`${API_URL}/todos`);\n\n  return response.json();\n};\n\nexport const getUser = async (id: number): Promise<User> => {\n  const response = await fetch(`${API_URL}/users/${id}`);\n\n  return response.json();\n};\n","import React, {\n  useEffect,\n  useState,\n  useCallback,\n} from 'react';\nimport './CurrentUser.scss';\nimport { getUser } from '../../api';\nimport { User } from '../../types/User';\n\ninterface Props {\n  userId: number;\n  clearUser: () => void;\n}\n\nexport const CurrentUser: React.FC<Props> = ({ userId, clearUser }) => {\n  const [currentUser, setCurrentUser] = useState<User | null>(null);\n  const [errorLoad, setErrorLoad] = useState<boolean | null>(null);\n\n  const fetchUser = useCallback(async () => {\n    try {\n      const newUser = await getUser(userId);\n\n      setCurrentUser(newUser);\n      setErrorLoad(null);\n    } catch {\n      setCurrentUser(null);\n      setErrorLoad(true);\n    }\n  }, [userId]);\n\n  useEffect(() => {\n    fetchUser();\n  }, [userId]);\n\n  return (\n    <>\n      {currentUser && (\n        <div className=\"CurrentUser\">\n          <h2 className=\"CurrentUser__title\">\n            <span>\n              {`Selected user: ${currentUser.id}`}\n            </span>\n          </h2>\n\n          <h3 className=\"CurrentUser__name\">\n            {currentUser.name}\n          </h3>\n          <p className=\"CurrentUser__email\">\n            {currentUser.email}\n          </p>\n          <p className=\"CurrentUser__phone\">\n            {currentUser.phone}\n          </p>\n\n          <button\n            type=\"button\"\n            className=\"CurrentUser__clear\"\n            onClick={clearUser}\n          >\n            Clear\n          </button>\n        </div>\n      )}\n\n      {errorLoad && <h2>{errorLoad}</h2>}\n    </>\n  );\n};\n","import React, {\n  useState,\n  useEffect,\n  useCallback,\n} from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { TodoList } from './components/TodoList';\nimport { CurrentUser } from './components/CurrentUser';\nimport { getTodos } from './api';\nimport { Todo } from './types/Todo';\n\nconst App: React.FC = () => {\n  const [selectedUserId, setSelectedUserId] = useState(0);\n  const [todos, setTodos] = useState<Todo[]>([]);\n\n  const clearUser = useCallback(() => setSelectedUserId(0), []);\n\n  const getData = useCallback(async () => {\n    const data = await getTodos();\n\n    setTodos(data);\n  }, []);\n\n  useEffect(() => {\n    getData();\n  }, []);\n\n  return (\n    <div className=\"App\">\n      <div className=\"App__sidebar\">\n        <TodoList\n          todos={todos}\n          setSelectedUserId={setSelectedUserId}\n        />\n      </div>\n\n      <div className=\"App__content\">\n        <div className=\"App__content-container\">\n          {selectedUserId ? (\n            <CurrentUser\n              userId={selectedUserId}\n              clearUser={clearUser}\n            />\n          ) : 'No user selected'}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}